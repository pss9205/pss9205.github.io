[{"permalink":"//","layout":"default","title":"Main Page","content":"# Main Page\n\n\n{% include list.liquid all=true%}","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":1,"permalink":"/NodeJS/","layout":"default","title":"NodeJS","content":"<h1 id=\"nodejs\">NodeJS</h1>\n\n<ul>\n <li><a href=\"/NodeJS/Passport.html\">PassPort</a></li>\n <li><a href=\"/NodeJS/Practices/\">Practice</a></li>\n</ul>\n\n<h2 id=\"nodejs-1\">Node.JS</h2>\n\n<blockquote>\n <p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p>\n</blockquote>\n\n<p>Chrome V8을 기반으로 만들어진 자바스크립트 런타임 엔진. <br />\nv8엔진 이외에도 libuv라는 라이브러리를 사용한다. libuv는 노드의 특성인 이벤트 기반, 논 블로킹 IO모델을 구현한다.</p>\n\n<pre><code class=\"language-note\">런타임 : 특정 언어로 만든 프로그램들을 실행할 수 있는 환경\n</code></pre>  \n\n<h3 id=\"event-driven\">Event-Driven</h3>\n<p>이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식\nNodeJS는 Event-Driven 방식으로 동작하며, 이벤트가 발생하면 이벤트 리스너에 등록해둔 콜백함수를 호출한다.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>   ┌───────────────────────────┐\n┌─&gt;│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │&lt;─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n</code></pre>  </div></div>\n<p>이벤트 루프는 이벤트 발생 시 호출할 콜백 함수들을 관리하고, 호출된 콜백함수의 실행 순서를 결정. <br />\n위의 그림처럼, 여러 개의 내부 단계를 가지고 있으며 각 단계마다 큐가 존재한다. 각 큐에는 이벤트 발생 후 백그라운드에서 넘어온 타이머나 이벤트 리스너의 콜백함수들이 위치함. 이벤트 루프는 단계들을 RR방식으로 순회하며 큐에 있는 것들을 처리한다.</p>\n\n<h3 id=\"blocking-io-vs-nonblocking-io\">Blocking I/O vs NonBlocking I/O</h3>\n<p>NodeJS는 I/O를 논블로킹 방식으로 처리한다. I/O작업은 libuv로 넘겨지고 자신의 스레드 풀이나, OS의 커널에게 요청하게 된다.\n작업이 완료되면 이벤트 루프에 알려주고 콜백함수로 등록된다.</p>\n\n<h4 id=\"blocking\">Blocking</h4>\n<p>현재의 I/O가 완료될때까지 추가 Javascript 작업이 수행되지 않고 대기 상태에 들어간다.\nBlocking작업이 수행되는 중에는 이벤트 루프가 다음 작업을 계속할수 없음.\nNodeJS에서 제공되는 메소드중 Sync로 끝나는 메소드들이 Blocking으로 동작하는 메소드</p>\n<div class=\"language-scss highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">const</span> <span class=\"nt\">fs</span> <span class=\"o\">=</span> <span class=\"nt\">require</span><span class=\"o\">(</span><span class=\"s1\">'fs'</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"nt\">const</span> <span class=\"nt\">data</span> <span class=\"o\">=</span> <span class=\"nt\">fs</span><span class=\"nc\">.readFileSync</span><span class=\"o\">(</span><span class=\"s1\">'/file.md'</span><span class=\"o\">)</span><span class=\"p\">;</span> <span class=\"c1\">// 파일이 다 읽을때까지 다음 메소드 실행안됨</span>\n<span class=\"nt\">console</span><span class=\"nc\">.log</span><span class=\"o\">(</span><span class=\"nt\">data</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"nt\">moreWork</span><span class=\"o\">()</span><span class=\"p\">;</span> <span class=\"c1\">// console.log 출력 후 실행됨</span>\n</code></pre>  </div></div>\n\n<h4 id=\"non-blocking\">Non-Blocking</h4>\n<p>I/O 작업 완료를 기다리지 않고 추가 JavaScript작업이 수행된다.<br />\n해당 작업의 콜백 함수는 이벤트 루프의 큐에 추가되며, 작업이 완료되면 이벤트 루프에 의해 콜백 함수가 실행되게 된다.</p>\n\n<div class=\"language-scss highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">function</span> <span class=\"nt\">longTask</span><span class=\"o\">()</span><span class=\"p\">{</span>\n\t<span class=\"c1\">//some job taking long time..</span>\n\t<span class=\"nt\">console</span><span class=\"nc\">.log</span><span class=\"o\">(</span><span class=\"s2\">\"long long..\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">console</span><span class=\"nc\">.log</span><span class=\"o\">(</span><span class=\"s1\">'start'</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"nt\">setTimeout</span><span class=\"o\">(</span><span class=\"nt\">longTask</span><span class=\"o\">,</span><span class=\"nt\">10</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"nt\">console</span><span class=\"nc\">.log</span><span class=\"o\">(</span><span class=\"s1\">'end'</span><span class=\"o\">)</span><span class=\"p\">;</span> <span class=\"c1\">//longTask의 완료를 기다리지 않고 다음 동작 수행</span>\n</code></pre>  </div></div>\n\n<h3 id=\"single-thread\">Single Thread</h3>\n<p>NodeJS는 내부에 여러 개의 스레드를 가지지만 제어할 수 있는 것은 한개의 스레드이다. <br />\nNon-Blocking방식을 이용해 단일 스레드에서도 여러 요청을 동시에 처리가 가능해진다.</p>\n<pre><code class=\"language-tip\">특정 동작(암호화,IO,압축등)을 수행할땐 멀티스레드로 동작하는데 이를 스레드 풀이라 한다.   \n노드 12 버전 이상에서는 워커 스레드를 사용해 멀티 스레드로 처리하는 것도 지원된다.\n</code></pre>  \n","dir":"/NodeJS/","name":"README.md","path":"NodeJS/README.md","url":"/NodeJS/"},{"sort":1,"permalink":"/SW%20Engineering/","layout":"default","title":"S/W Engineering","content":"<h1 id=\"sw-engineering\">S/W Engineering</h1>\n\n<ul>\n <li><a href=\"/SW%20Engineering/Design%20Pattern/\">Design Pattern</a></li>\n</ul>\n","dir":"/SW%20Engineering/","name":"README.md","path":"SW Engineering/README.md","url":"/SW%20Engineering/"},{"sort":1,"permalink":"/JavaScript/","layout":"default","title":"JavaScript","content":"<h1 id=\"javascript\">JavaScript</h1>\n\n<ul>\n <li><a href=\"/JavaScript/Basic/\">Basic</a></li>\n</ul>\n\n","dir":"/JavaScript/","name":"README.md","path":"JavaScript/README.md","url":"/JavaScript/"},{"sort":1,"layout":"default","title":"PassPort","content":"<h1 id=\"passport\">PassPort</h1>\n","dir":"/NodeJS/","name":"Passport.md","path":"NodeJS/Passport.md","url":"/NodeJS/Passport.html"},{"sort":2,"permalink":"/NodeJS/Practices/","layout":"default","title":"Practice","content":"<h1 id=\"practice\">Practice</h1>\n\n","dir":"/NodeJS/Practices/","name":"README.md","path":"NodeJS/Practices/README.md","url":"/NodeJS/Practices/"},{"sort":2,"permalink":"/JavaScript/Basic/","layout":"default","title":"Basic","content":"<h1 id=\"basic\">Basic</h1>\n\n<p>Based On <a href=\"https://youtu.be/wcsVjmHrUQg\">Youtube</a></p>\n\n","dir":"/JavaScript/Basic/","name":"README.md","path":"JavaScript/Basic/README.md","url":"/JavaScript/Basic/"},{"sort":2,"permalink":"/SW%20Engineering/Design%20Pattern/","layout":"default","title":"Design Pattern","content":"<h1 id=\"design-pattern\">Design Pattern</h1>\n\n","dir":"/SW%20Engineering/Design%20Pattern/","name":"README.md","path":"SW Engineering/Design Pattern/README.md","url":"/SW%20Engineering/Design%20Pattern/"}]